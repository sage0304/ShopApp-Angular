{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { environment } from 'src/app/environments/environment';\nexport let HomeComponent = class HomeComponent {\n  // keyword:string = \"\";\n  // constructor(\n  //   private productService: ProductService,\n  //   private categoryService: CategoryService,    \n  //   private router: Router\n  //   ) {}\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    // categories: Category[] = []; // Dữ liệu động từ categoryService\n    // selectedCategoryId: number  = 0; // Giá trị category được chọn\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.pages = [];\n    this.totalPages = 0;\n    this.visiblePages = [];\n  }\n  ngOnInit() {\n    // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\n    // this.getCategories(1, 100);\n    this.getProducts(this.currentPage, this.itemsPerPage);\n  }\n  // getCategories(page: number, limit: number) {\n  //   this.categoryService.getCategories(page, limit).subscribe({\n  //     next: (categories: Category[]) => {\n  //       debugger\n  //       this.categories = categories;\n  //     },\n  //     complete: () => {\n  //       debugger;\n  //     },\n  //     error: (error: any) => {\n  //       console.error('Error fetching categories:', error);\n  //     }\n  //   });\n  // }\n  // searchProducts() {\n  //   this.currentPage = 1;\n  //   this.itemsPerPage = 12;\n  //   debugger\n  //   // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\n  //   this.getProducts(this.currentPage, this.itemsPerPage);\n  // }\n  // getProducts(keyword: string, selectedCategoryId: number, page: number, limit: number) {\n  //   this.productService.getProducts(keyword, selectedCategoryId, page, limit).subscribe({\n  //       next: (response: any) => {\n  //           debugger;\n  //           response.products.forEach((product: Product) => {          \n  //               product.url = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\n  //           });\n  //           this.products = response.products;\n  //           this.totalPages = response.totalPages;\n  //           this.visiblePages = this.generateVisiblePageArray(this.currentPage, this.totalPages);\n  //       },\n  //       complete: () => {\n  //           debugger;\n  //       },\n  //       error: (error: any) => {\n  //           debugger;\n  //           console.error('Error fetching products:', error);\n  //       }\n  //   });    \n  getProducts(page, limit) {\n    this.productService.getProducts(page, limit).subscribe({\n      next: response => {\n        debugger;\n        response.products.forEach(product => {\n          product.url = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\n        });\n        this.products = response.products;\n        this.totalPages = response.totalPages;\n        this.visiblePages = this.generateVisiblePageArray(this.currentPage, this.totalPages);\n      },\n      complete: () => {\n        debugger;\n      },\n      error: error => {\n        debugger;\n        console.error('Error fetching products:', error);\n      }\n    });\n  }\n  onPageChange(page) {\n    debugger;\n    this.currentPage = page;\n    // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\n    this.getProducts(this.currentPage, this.itemsPerPage);\n  }\n  generateVisiblePageArray(currentPage, totalPages) {\n    const maxVisiblePages = 5;\n    const halfVisiblePages = Math.floor(maxVisiblePages / 2);\n    let startPage = Math.max(currentPage - halfVisiblePages, 1);\n    let endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);\n    if (endPage - startPage + 1 < maxVisiblePages) {\n      startPage = Math.max(endPage - maxVisiblePages + 1, 1);\n    }\n    return new Array(endPage - startPage + 1).fill(0).map((_, index) => startPage + index);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);","map":{"version":3,"names":["Component","environment","HomeComponent","constructor","productService","products","currentPage","itemsPerPage","pages","totalPages","visiblePages","ngOnInit","getProducts","page","limit","subscribe","next","response","forEach","product","url","apiBaseUrl","thumbnail","generateVisiblePageArray","complete","error","console","onPageChange","maxVisiblePages","halfVisiblePages","Math","floor","startPage","max","endPage","min","Array","fill","map","_","index","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\CODING STUDY\\SpringBoot Udemy\\shopapp-angular\\src\\app\\components\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Product } from '../../models/product';\r\nimport { Category } from '../../models/category';\r\nimport { ProductService } from 'src/app/services/product.service';\r\nimport { CategoryService } from 'src/app/services/category.service';\r\nimport { environment } from 'src/app/environments/environment';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  products: Product[] = [];\r\n  // categories: Category[] = []; // Dữ liệu động từ categoryService\r\n  // selectedCategoryId: number  = 0; // Giá trị category được chọn\r\n  currentPage: number = 1;\r\n  itemsPerPage: number = 10;\r\n  pages: number[] = [];\r\n  totalPages:number = 0;\r\n  visiblePages: number[] = [];\r\n  // keyword:string = \"\";\r\n\r\n  // constructor(\r\n  //   private productService: ProductService,\r\n  //   private categoryService: CategoryService,    \r\n  //   private router: Router\r\n  //   ) {}\r\n\r\n  constructor(\r\n    private productService: ProductService,\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n    // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\r\n    // this.getCategories(1, 100);\r\n    this.getProducts(this.currentPage, this.itemsPerPage);\r\n  }\r\n  // getCategories(page: number, limit: number) {\r\n  //   this.categoryService.getCategories(page, limit).subscribe({\r\n  //     next: (categories: Category[]) => {\r\n  //       debugger\r\n  //       this.categories = categories;\r\n  //     },\r\n  //     complete: () => {\r\n  //       debugger;\r\n  //     },\r\n  //     error: (error: any) => {\r\n  //       console.error('Error fetching categories:', error);\r\n  //     }\r\n  //   });\r\n  // }\r\n  \r\n  // searchProducts() {\r\n  //   this.currentPage = 1;\r\n  //   this.itemsPerPage = 12;\r\n  //   debugger\r\n  //   // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\r\n  //   this.getProducts(this.currentPage, this.itemsPerPage);\r\n  // }\r\n\r\n  // getProducts(keyword: string, selectedCategoryId: number, page: number, limit: number) {\r\n  //   this.productService.getProducts(keyword, selectedCategoryId, page, limit).subscribe({\r\n  //       next: (response: any) => {\r\n  //           debugger;\r\n  //           response.products.forEach((product: Product) => {          \r\n  //               product.url = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\r\n  //           });\r\n  //           this.products = response.products;\r\n  //           this.totalPages = response.totalPages;\r\n  //           this.visiblePages = this.generateVisiblePageArray(this.currentPage, this.totalPages);\r\n  //       },\r\n  //       complete: () => {\r\n  //           debugger;\r\n  //       },\r\n  //       error: (error: any) => {\r\n  //           debugger;\r\n  //           console.error('Error fetching products:', error);\r\n  //       }\r\n  //   });    \r\n\r\n  getProducts(page: number, limit: number) {\r\n    this.productService.getProducts(page, limit).subscribe({\r\n        next: (response: any) => {\r\n            debugger;\r\n            response.products.forEach((product: Product) => {          \r\n                product.url = `${environment.apiBaseUrl}/products/images/${product.thumbnail}`;\r\n            });\r\n            this.products = response.products;\r\n            this.totalPages = response.totalPages;\r\n            this.visiblePages = this.generateVisiblePageArray(this.currentPage, this.totalPages);\r\n        },\r\n        complete: () => {\r\n            debugger;\r\n        },\r\n        error: (error: any) => {\r\n            debugger;\r\n            console.error('Error fetching products:', error);\r\n        }\r\n    });\r\n}\r\n\r\n  onPageChange(page: number) {\r\n    debugger;\r\n    this.currentPage = page;\r\n    // this.getProducts(this.keyword, this.selectedCategoryId, this.currentPage, this.itemsPerPage);\r\n    this.getProducts(this.currentPage, this.itemsPerPage);\r\n  }\r\n\r\n  generateVisiblePageArray(currentPage: number, totalPages: number): number[] {\r\n    const maxVisiblePages = 5;\r\n    const halfVisiblePages = Math.floor(maxVisiblePages / 2);\r\n\r\n    let startPage = Math.max(currentPage - halfVisiblePages, 1);\r\n    let endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);\r\n\r\n    if (endPage - startPage + 1 < maxVisiblePages) {\r\n      startPage = Math.max(endPage - maxVisiblePages + 1, 1);\r\n    }\r\n\r\n    return new Array(endPage - startPage + 1).fill(0).map((_, index) => startPage + index);\r\n  }\r\n  // // Hàm xử lý sự kiện khi sản phẩm được bấm vào\r\n  // onProductClick(productId: number) {\r\n  //   debugger\r\n  //   // Điều hướng đến trang detail-product với productId là tham số\r\n  //   this.router.navigate(['/detail-product', productId]);\r\n  // }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}