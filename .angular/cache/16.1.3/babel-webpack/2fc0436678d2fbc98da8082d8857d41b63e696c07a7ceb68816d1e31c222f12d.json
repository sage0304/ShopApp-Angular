{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nexport class CartService {\n  constructor(productService) {\n    this.productService = productService;\n    this.cart = new Map(); // Dùng Map để lưu trữ giỏ hàng, key là id sản phẩm, value là số lượng\n    // Lấy dữ liệu giỏ hàng từ localStorage khi khởi tạo service    \n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      this.cart = new Map(JSON.parse(storedCart));\n    }\n  }\n  addToCart(productId, quantity = 1) {\n    debugger;\n    if (this.cart.has(productId)) {\n      // Nếu sản phẩm đã có trong giỏ hàng, tăng số lượng lên `quantity`\n      this.cart.set(productId, this.cart.get(productId) + quantity);\n    } else {\n      // Nếu sản phẩm chưa có trong giỏ hàng, thêm sản phẩm vào với số lượng là `quantity`\n      this.cart.set(productId, quantity);\n    }\n    // Sau khi thay đổi giỏ hàng, lưu trữ nó vào localStorage\n    this.saveCartToLocalStorage();\n  }\n  getCart() {\n    return this.cart;\n  }\n  // Lưu trữ giỏ hàng vào localStorage\n  saveCartToLocalStorage() {\n    debugger;\n    localStorage.setItem('cart', JSON.stringify(Array.from(this.cart.entries())));\n  }\n  // Hàm xóa dữ liệu giỏ hàng và cập nhật Local Storage\n  clearCart() {\n    this.cart.clear(); // Xóa toàn bộ dữ liệu trong giỏ hàng\n    this.saveCartToLocalStorage(); // Lưu giỏ hàng mới vào Local Storage (trống)\n  }\n}\n\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.ProductService));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CartService","constructor","productService","cart","Map","storedCart","localStorage","getItem","JSON","parse","addToCart","productId","quantity","has","set","get","saveCartToLocalStorage","getCart","setItem","stringify","Array","from","entries","clearCart","clear","i0","ɵɵinject","i1","ProductService","factory","ɵfac","providedIn"],"sources":["D:\\CODING STUDY\\SpringBoot Udemy\\shopapp-angular\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from '../models/product';\nimport { ProductService } from './product.service';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CartService {\n  private cart: Map<number, number> = new Map(); // Dùng Map để lưu trữ giỏ hàng, key là id sản phẩm, value là số lượng\n\n  constructor(private productService: ProductService) {\n    // Lấy dữ liệu giỏ hàng từ localStorage khi khởi tạo service    \n    const storedCart = localStorage.getItem('cart');\n    if (storedCart) {\n      this.cart = new Map(JSON.parse(storedCart));      \n    }\n  }\n\n  addToCart(productId: number, quantity: number = 1): void {\n    debugger\n    if (this.cart.has(productId)) {\n      // Nếu sản phẩm đã có trong giỏ hàng, tăng số lượng lên `quantity`\n      this.cart.set(productId, this.cart.get(productId)! + quantity);\n    } else {\n      // Nếu sản phẩm chưa có trong giỏ hàng, thêm sản phẩm vào với số lượng là `quantity`\n      this.cart.set(productId, quantity);\n    }\n     // Sau khi thay đổi giỏ hàng, lưu trữ nó vào localStorage\n    this.saveCartToLocalStorage();\n  }\n  \n  getCart(): Map<number, number> {\n    return this.cart;\n  }\n  // Lưu trữ giỏ hàng vào localStorage\n  private saveCartToLocalStorage(): void {\n    debugger\n    localStorage.setItem('cart', JSON.stringify(Array.from(this.cart.entries())));\n  }  \n  // Hàm xóa dữ liệu giỏ hàng và cập nhật Local Storage\n  clearCart(): void {\n    this.cart.clear(); // Xóa toàn bộ dữ liệu trong giỏ hàng\n    this.saveCartToLocalStorage(); // Lưu giỏ hàng mới vào Local Storage (trống)\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAF1B,KAAAC,IAAI,GAAwB,IAAIC,GAAG,EAAE,CAAC,CAAC;IAG7C;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI,CAACF,IAAI,GAAG,IAAIC,GAAG,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;;EAE/C;EAEAK,SAASA,CAACC,SAAiB,EAAEC,QAAA,GAAmB,CAAC;IAC/C;IACA,IAAI,IAAI,CAACT,IAAI,CAACU,GAAG,CAACF,SAAS,CAAC,EAAE;MAC5B;MACA,IAAI,CAACR,IAAI,CAACW,GAAG,CAACH,SAAS,EAAE,IAAI,CAACR,IAAI,CAACY,GAAG,CAACJ,SAAS,CAAE,GAAGC,QAAQ,CAAC;KAC/D,MAAM;MACL;MACA,IAAI,CAACT,IAAI,CAACW,GAAG,CAACH,SAAS,EAAEC,QAAQ,CAAC;;IAEnC;IACD,IAAI,CAACI,sBAAsB,EAAE;EAC/B;EAEAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACd,IAAI;EAClB;EACA;EACQa,sBAAsBA,CAAA;IAC5B;IACAV,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAClB,IAAI,CAACmB,OAAO,EAAE,CAAC,CAAC,CAAC;EAC/E;EACA;EACAC,SAASA,CAAA;IACP,IAAI,CAACpB,IAAI,CAACqB,KAAK,EAAE,CAAC,CAAC;IACnB,IAAI,CAACR,sBAAsB,EAAE,CAAC,CAAC;EACjC;;;AApCWhB,WAAW,C;mBAAXA,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;AAAX5B,WAAW,C;SAAXA,WAAW;EAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;EAAAC,UAAA,EAHV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}